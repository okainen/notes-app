swagger: "2.0"
info:
  title: "Notes App"
  description: ""
  version: "1.0.0"
host: "localhost:9000"
consumes:
  - application/json
  - application/text
produces:
  - application/json
  - application/text
securityDefinitions:
  Cookie:
    description: "Play cookie-based authentication"
    type: apiKey
    in: header
    name: Cookie
tags:
  - name: "Auth"
  - name: "Posts"
schemes:
  - "http"
paths:
  /api/auth/signup:
    post:
      tags:
      - "Auth"
      summary: "Sign up"
      operationId: "SignUp"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        description: "DTO for signing up"
        name: "UserDto"
        required: true
        schema:
          $ref: "#/definitions/UserDto"
      responses:
        '201':
          description: "Successfully created user"
        '400':
          description: "No/Wrong JSON passed"
        '409':
          description: "User already exists"
        '500':
          description: "Internal server error"
  /api/auth/signin:
    post:
      tags:
      - "Auth"
      summary: "Sign in"
      operationId: "SignIn"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        description: "DTO for signing in"
        name: "CredentialsDto"
        required: true
        schema:
          "$ref": "#/definitions/CredentialsDto"
      responses:
        '200':
          description: "Successfully signed in"
        '400':
          description: "No/Wrong JSON passed"
        '401':
          description: "Wrong credentials passed"
        '403':
          description: "User is not active"
        '500':
          description: "Internal server error"
  /api/auth/signout:
    get:
      tags:
      - "Auth"
      summary: "Sign out"
      operationId: "SignOut"
      produces:
      - application/json
      responses:
        '200':
          description: "Successfully signed out"
        '401':
          description: "Unauthorized"
        '500':
          description: "Internal server error"
  /api/auth/verify/{token}:
    get:
      tags:
      - "Auth"
      summary: "Verify email address"
      operationId: "VerifyEmailWithToken"
      produces:
      - application/json
      parameters:
      - name: "token"
        in: path
        required: true
        type: string
        format: "uuid"
      responses:
        '204':
          description: "Successfully verified email"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not found"
        '500':
          description: "Internal server error"
  /api/posts:
    get:
      tags:
      - "Posts"
      summary: "Get all user posts"
      operationId: "GetAllUserPosts"
      produces:
      - application/json
      responses:
        '200':
          description: "Successfully retrieved posts"
          schema:
            type: array
            items:
              $ref: '#/definitions/Post'
        '401':
          description: "Unauthorized"
        '404':
          description: "Not found"
        '500':
          description: "Internal server error"
    post:
      tags:
      - "Posts"
      summary: "Add post"
      operationId: "AddPost"
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          description: "DTO for adding post"
          name: "CreatePostDto"
          required: true
          schema:
            "$ref": "#/definitions/PostDto"
      responses:
        '201':
          description: "Successfully created post"
          schema:
            "$ref": "#/definitions/Post"
        '400':
          description: "No/Wrong JSON passed"
        '401':
          description: "Unauthorized"
        '500':
          description: "Internal server error"
  /api/posts/{id}:
    get:
      tags:
      - "Posts"
      summary: "Get user post by ID"
      operationId: "GetUserPostById"
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: string
        required: true
        format: "uuid"
      responses:
        '200':
          description: "Successfully retrieved post"
          schema:
            "$ref": "#/definitions/Post"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not found"
        '500':
          description: "Internal server error"
    patch:
      tags:
      - "Posts"
      summary: "Update user post by ID"
      operationId: "UpdateUserPostById"
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        required: true
        type: string
        format: "uuid"
      - in: body
        description: "DTO for updating post"
        name: "UserDto"
        required: true
        schema:
          "$ref": "#/definitions/PostDto"
      responses:
        '200':
          description: "Successfuly updated post"
          schema:
            "$ref": "#/definitions/Post"
        '400':
          description: "No/Wrong JSON passed"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not found"
        '500':
          description: "Internal server error"
    delete:
      tags:
      - "Posts"
      summary: "Delete user post by ID"
      operationId: "DeleteUserPostById"
      produces:
      - application/json
      parameters:
      - in: path
        name: id
        type: string
        required: true
        format: "uuid"
      responses:
        '204':
          description: "Successfully deleted post"
        '401':
          description: "Unauthorized"
        '404':
          description: "Not found"
        '500':
          description: "Internal server error"
definitions:
  UserDto:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        pattern: '(?=\w*[0-9])(?=\w*[a-z])(?=\w*[A-Z])\w{8,128}'
  CredentialsDto:
    type: object
    properties:
      email:
        type: string
        format: email
      password:
        type: string
        pattern: '(?=\w*[0-9])(?=\w*[a-z])(?=\w*[A-Z])\w{8,128}'
  PostDto:
    type: object
    properties:
      title:
        type: string
      content:
        type: string
  Post:
    type: object
    properties:
      id:
        type: string
        format: uuid
      title:
        type: string
      content:
        type: string
      modified:
        type: string
        format: date-time
